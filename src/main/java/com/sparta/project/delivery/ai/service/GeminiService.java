package com.sparta.project.delivery.ai.service;import com.sparta.project.delivery.ai.Entity.Ai;import com.sparta.project.delivery.ai.config.GeminiInterface;import com.sparta.project.delivery.ai.dto.AiDto;import com.sparta.project.delivery.ai.dto.GeminiRequest;import com.sparta.project.delivery.ai.dto.GeminiResponse;import com.sparta.project.delivery.ai.repository.AiRepository;import lombok.RequiredArgsConstructor;import org.springframework.beans.factory.annotation.Value;import org.springframework.stereotype.Service;@Service@RequiredArgsConstructorpublic class GeminiService {    private final GeminiInterface geminiInterface;    private final AiRepository aiRepository;    //    private final UserRepository userRepository;    @Value("${gemini.api.model}")    private String apiModel;    private GeminiResponse getCompletion(GeminiRequest request) {        return geminiInterface.getCompletion(apiModel, request);    }    public AiDto getCompletion(AiDto aiDto) {//        User user = userRepository.save(aiDto.user());        if (aiDto.question() == null || aiDto.question().length() > 50) {            throw new IllegalArgumentException("question length should be less than 50 AND more than 0");        }        GeminiRequest geminiRequest = new GeminiRequest(aiDto.question() + " 답변은 최대한 간결하게 50자 이하로");        GeminiResponse response = getCompletion(geminiRequest);        // response.getCandidates().get(0).getContent().getParts().get(0).text        String answer = response.getCandidates()                .stream()                .findFirst().flatMap(candidate -> candidate.getContent().getParts()                        .stream()                        .findFirst()                        .map(GeminiResponse.TextPart::getText))                .orElse(null);        Ai ai = aiRepository.save(aiDto.toEntity(aiDto.user(), answer));        return AiDto.from(ai);    }}