package com.sparta.project.delivery.category.service;import com.sparta.project.delivery.category.dto.CategoryDto;import com.sparta.project.delivery.category.entity.Category;import com.sparta.project.delivery.category.repository.CategoryRepository;import jakarta.persistence.EntityExistsException;import jakarta.persistence.EntityNotFoundException;import lombok.RequiredArgsConstructor;import org.springframework.data.domain.Page;import org.springframework.data.domain.Pageable;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;@Service@RequiredArgsConstructorpublic class CategoryService {    private final CategoryRepository categoryRepository;    public Page<CategoryDto> getCategories(Pageable pageable) {        return categoryRepository.findAll(pageable).map(CategoryDto::from);    }    @Transactional    public void addCategory(CategoryDto dto) {        if (dto.name() == null || dto.name().isEmpty()) {            throw new IllegalArgumentException("category name cannot be empty");        }        if (categoryRepository.findByName(dto.name()).isPresent()) {            throw new EntityExistsException("Category name already exists");        }        categoryRepository.save(dto.toEntity());    }    @Transactional    public void deleteCategory(String categoryId) {        if (categoryRepository.findById(categoryId).isEmpty()) {            throw new EntityNotFoundException("Category is not exist");        }        categoryRepository.deleteById(categoryId);    }    @Transactional    public void updateCategory(String categoryId, CategoryDto dto) {        if (dto.name() == null || dto.name().isEmpty()) {            throw new IllegalArgumentException("category name cannot be empty");        }        if (categoryRepository.findByName(dto.name()).isPresent()) {            throw new EntityExistsException("Category name already exists");        }        Category category = categoryRepository.findById(categoryId)                .orElseThrow(() -> new EntityNotFoundException("Category is not exist"));        category.setName(dto.name());    }}