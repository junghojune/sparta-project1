package com.sparta.project.delivery.region.service;import com.sparta.project.delivery.common.exception.CustomException;import com.sparta.project.delivery.region.dto.RegionDto;import com.sparta.project.delivery.region.entity.Region;import com.sparta.project.delivery.region.repository.RegionRepository;import com.sparta.project.delivery.user.User;import com.sparta.project.delivery.user.dto.UserDto;import com.sparta.project.delivery.user.repository.UserRepository;import jakarta.transaction.Transactional;import lombok.RequiredArgsConstructor;import org.springframework.data.domain.Page;import org.springframework.data.domain.Pageable;import org.springframework.stereotype.Service;import java.util.Optional;import static com.sparta.project.delivery.common.exception.DeliveryError.*;import static com.sparta.project.delivery.common.type.UserRoleEnum.MANAGER;import static com.sparta.project.delivery.common.type.UserRoleEnum.MASTER;@RequiredArgsConstructor@Servicepublic class RegionService {    private final RegionRepository regionRepository;    private final UserRepository userRepository;    public Page<RegionDto> getRegion(Pageable pageable) {        return regionRepository.findAllByIsDeletedFalse(pageable).map(RegionDto::from);    }    @Transactional    public void addRegion(UserDto userDto, RegionDto dto) {        User user = userRepository.findById(userDto.userId())                .orElseThrow(() -> new CustomException(USER_NOT_FOUND));        if (user.getRole().equals(MANAGER) || user.getRole().equals(MASTER)) {            throw new CustomException(AUTH_INVALID_CREDENTIALS);        }        if (dto.city() == null) {            throw new CustomException(REGION_ARGS_EMPTY);        }        if (regionRepository.findByCityAndSiGunAndGuAndVillageAndIsDeletedFalse(dto.city(), dto.siGun(), dto.gu(), dto.village()).isPresent()) {            throw new CustomException(REGION_ALREADY_EXISTS);        }        regionRepository.save(dto.toEntity());    }    @Transactional    public Optional<RegionDto> updateRegion(UserDto userDto, String regionId, RegionDto dto) {        User user = userRepository.findById(userDto.userId())                .orElseThrow(() -> new CustomException(USER_NOT_FOUND));        if (user.getRole().equals(MANAGER) || user.getRole().equals(MASTER)) {            throw new CustomException(AUTH_INVALID_CREDENTIALS);        }        if (dto.city() == null && dto.siGun() == null && dto.gu() == null && dto.village() == null) {            throw new CustomException(REGION_ARGS_EMPTY);        }        if (regionRepository.findByCityAndSiGunAndGuAndVillageAndIsDeletedFalse(dto.city(), dto.siGun(), dto.gu(), dto.village()).isPresent()) {            throw new CustomException(REGION_ALREADY_EXISTS);        }        Region region = regionRepository.findByRegionIdAndIsDeletedFalse(regionId)                .orElseThrow(() -> new CustomException(REGION_NOT_FOUND));        if (dto.city() != null && !dto.city().equals(region.getCity())) {            region.setCity(dto.city());        }        if (dto.siGun() != null && !dto.siGun().equals(region.getSiGun())) {            region.setSiGun(dto.siGun());        }        if (dto.gu() != null && !dto.gu().equals(region.getGu())) {            region.setGu(dto.gu());        }        if (dto.village() != null && !dto.village().equals(region.getVillage())) {            region.setVillage(dto.village());        }        return regionRepository.findByRegionIdAndIsDeletedFalse(regionId).map(RegionDto::from);    }    @Transactional    public void deleteRegion(UserDto userDto, String regionId) {        User user = userRepository.findById(userDto.userId())                .orElseThrow(() -> new CustomException(USER_NOT_FOUND));        if (user.getRole().equals(MANAGER) || user.getRole().equals(MASTER)) {            throw new CustomException(AUTH_INVALID_CREDENTIALS);        }        Region region = regionRepository.findByRegionIdAndIsDeletedFalse(regionId)                .orElseThrow(() -> new CustomException(REGION_NOT_FOUND));        region.setIsDeleted(true);    }}