package com.sparta.project.delivery.region.controller;import com.sparta.project.delivery.auth.UserDetailsImpl;import com.sparta.project.delivery.common.response.CommonResponse;import com.sparta.project.delivery.region.dto.RegionRequest;import com.sparta.project.delivery.region.dto.RegionResponse;import com.sparta.project.delivery.region.service.RegionService;import com.sparta.project.delivery.user.dto.UserDto;import io.swagger.v3.oas.annotations.Operation;import io.swagger.v3.oas.annotations.media.Content;import io.swagger.v3.oas.annotations.responses.ApiResponse;import io.swagger.v3.oas.annotations.responses.ApiResponses;import io.swagger.v3.oas.annotations.tags.Tag;import lombok.RequiredArgsConstructor;import org.springframework.data.domain.Page;import org.springframework.data.domain.Pageable;import org.springframework.data.domain.Sort;import org.springframework.data.web.PageableDefault;import org.springframework.security.core.annotation.AuthenticationPrincipal;import org.springframework.web.bind.annotation.*;import java.util.Optional;@RequiredArgsConstructor@RestController@RequestMapping("/api/region")@Tag(name = "Region API", description = "지역을 추가 수정 삭제 조회 할 수 있는 API 입니다.")public class RegionController {    private final RegionService regionService;    @GetMapping    @Operation(summary = "region 조회 API", description = "region 정보를 조회합니다.")    @ApiResponses(value = {            @ApiResponse(responseCode = "200")    })    public CommonResponse<Page<RegionResponse>> getRegion(            @PageableDefault(size = 10, sort = "city", direction = Sort.Direction.ASC) Pageable pageable    ) {        return CommonResponse.success(regionService.getRegion(pageable).map(RegionResponse::from));    }    @PostMapping    @Operation(summary = "region 생성 API", description = "region 를 추가합니다.")    @ApiResponses(value = {            @ApiResponse(responseCode = "200"),            @ApiResponse(responseCode = "400", description = "잘못된 요청입니다.", content = @Content),            @ApiResponse(responseCode = "404", description = "사용자를 찾을 수 없습니다.", content = @Content),            @ApiResponse(responseCode = "401", description = "유효하지 않은 자격 증명입니다.", content = @Content),            @ApiResponse(responseCode = "852", description = "이미 존재하는 지역입니다..", content = @Content),            @ApiResponse(responseCode = "853", description = "지역 생성하는데 필수값이 없습니다.", content = @Content)    })    public CommonResponse<String> addRegion(            @AuthenticationPrincipal UserDetailsImpl userDetails,            @RequestBody RegionRequest request    ) {        regionService.addRegion(UserDto.from(userDetails.getUser()), request.toDto());        return CommonResponse.success("카테고리 생성 성공");    }    @PutMapping("/{regionId}")    @Operation(summary = "category 수정 API", description = "기존에 있던 Category 를 수정합니다.")    @ApiResponses(value = {            @ApiResponse(responseCode = "200"),            @ApiResponse(responseCode = "400", description = "잘못된 요청입니다.", content = @Content),            @ApiResponse(responseCode = "404", description = "사용자를 찾을 수 없습니다.", content = @Content),            @ApiResponse(responseCode = "401", description = "유효하지 않은 자격 증명입니다.", content = @Content),            @ApiResponse(responseCode = "801", description = "카테고리를 찾을 수 없습니다.", content = @Content),            @ApiResponse(responseCode = "802", description = "이미 존재하는 카테고리입니다.", content = @Content),            @ApiResponse(responseCode = "803", description = "카테고리 생성하는데 필수값이 없습니다.", content = @Content)    })    public CommonResponse<Optional<RegionResponse>> updateRegion(            @AuthenticationPrincipal UserDetailsImpl userDetails,            @PathVariable("regionId") String regionId,            @RequestBody RegionRequest request    ) {        return CommonResponse.success(                regionService.updateRegion(                        UserDto.from(userDetails.getUser()), regionId, request.toDto()).map(RegionResponse::from)        );    }    @DeleteMapping("/{regionId}")    @Operation(summary = "category 삭제 API", description = "기존에 있던 Category 를 삭제합니다..")    @ApiResponses(value = {            @ApiResponse(responseCode = "200"),            @ApiResponse(responseCode = "400", description = "잘못된 요청입니다.", content = @Content),            @ApiResponse(responseCode = "404", description = "사용자를 찾을 수 없습니다.", content = @Content),            @ApiResponse(responseCode = "401", description = "유효하지 않은 자격 증명입니다.", content = @Content),            @ApiResponse(responseCode = "801", description = "카테고리를 찾을 수 없습니다.", content = @Content),    })    public CommonResponse<String> deleteRegion(            @AuthenticationPrincipal UserDetailsImpl userDetails,            @PathVariable("regionId") String regionId    ) {        regionService.deleteRegion(UserDto.from(userDetails.getUser()), regionId);        return CommonResponse.success("지역을 삭제하였습니다.");    }}